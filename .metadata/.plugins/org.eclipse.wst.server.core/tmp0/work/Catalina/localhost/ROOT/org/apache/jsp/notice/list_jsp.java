/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-06 03:15:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.edu.noticeapp.repository.NoticeDAO;
import com.edu.noticeapp.domain.Notice;
import java.util.ArrayList;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	// 선언부는 인스턴스 멤버영역이므로, 여기에 선언한 변수는 , JSP의 인스턴스가 생성될 때 초기화됨
	NoticeDAO noticeDAO = new NoticeDAO();

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.edu.noticeapp.domain.Notice");
    _jspx_imports_classes.add("com.edu.noticeapp.repository.NoticeDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

    ArrayList<Notice> list = noticeDAO.selectAll();
	int totalRecord=list.size();//총 레코드 수
	int pageSize=10;//페이지당 보여질 레코드 수
	int totalPage=(int)Math.ceil((float)totalRecord/pageSize);//총 페이지수
	//한쪽이 float으로 바꼈기 때문에 연산을 위해 나머지 한쪽도 float로 자동형변환됨
	
	int blockSize=10;//블럭당 보여질 페이지 수
	int currentPage=1;//현재 유저가 보는 페이지
	//전송되어온 currentPage를 jsp의 currentPage 변수에 대입
	//null아닐때, 아래의 페이지 번호를 누르고 들어올때만
	if(request.getParameter("currentPage")!=null){
		currentPage=Integer.parseInt(request.getParameter("currentPage"));
	}

	int firstPage=currentPage-(currentPage-1)%blockSize;//블럭당 반복문의 시작값
	int lastPage=firstPage+(blockSize-1);//블럭당 반복문의 끝값

	//페이지당 시작 인덱스(ArrayList에서)
	int curPos = (currentPage-1)*pageSize; 

	//페이지당 시작값을 구하는 공식
	int num=totalRecord-curPos;//페이지당 시작 게시물 번호


      out.write('\r');
      out.write('\n');
      out.print("totalRecord="+totalRecord);
      out.write("<br>\r\n");
      out.print("pageSize="+pageSize);
      out.write("<br>\r\n");
      out.print("totalPage="+totalPage);
      out.write("<br>\r\n");
      out.print("currentPage="+currentPage);
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <style>\r\n");
      out.write("        table {\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            border-spacing: 0;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            left: 0px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th,\r\n");
      out.write("        td {\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            padding: 16px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tr:nth-child(even) {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("		a{\r\n");
      out.write("		text-decoration:none;\r\n");
      out.write("		}\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        $(document).ready(function () {\r\n");
      out.write("            //(\"css의 선택자\").()메서드 \r\n");
      out.write("            //$(\"table\").animate({ left: '0px' });\r\n");
      out.write("\r\n");
      out.write("			//글등록 버튼을 클릭하면..\r\n");
      out.write("			$(\"button\").on(\"click\", function(){\r\n");
      out.write("				location.href=\"/notice/write.html\";\r\n");
      out.write("			});\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <table>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>No</th>\r\n");
      out.write("            <th>제목</th>\r\n");
      out.write("            <th>작성자</th>\r\n");
      out.write("            <th>등록일</th>\r\n");
      out.write("            <th>조회수</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("		");
for(int i=1;i<=pageSize;i++){
      out.write("\r\n");
      out.write("		");
if(num<1) break; //num이 1보다 작아지면 
      out.write("\r\n");
      out.write("		");
Notice notice = list.get(curPos++);
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>");
      out.print(num--);
      out.write("</td>\r\n");
      out.write("            <td>\r\n");
      out.write("				<a href=\"/notice/content.jsp?notice_idx=");
      out.print(notice.getNotice_idx());
      out.write('"');
      out.write('>');
      out.print(notice.getTitle());
      out.write("</a>\r\n");
      out.write("			</td>\r\n");
      out.write("            <td>");
      out.print(notice.getWriter());
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(notice.getRegdate());
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(notice.getHit());
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("		");
}
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\" style=\"text-align:center\">\r\n");
      out.write("				");
if(firstPage-1>0){
      out.write("\r\n");
      out.write("				<a href=\"/notice/list.jsp?currentPage=");
      out.print(firstPage-1);
      out.write("\">◀</a>\r\n");
      out.write("				");
}else{
      out.write("\r\n");
      out.write("					<a href=\"javascript:alert('이전 페이지가 없습니다.')\">◀</a>\r\n");
      out.write("				");
}
      out.write("\r\n");
      out.write("				");
for(int i=firstPage;i<=lastPage;i++){
      out.write("\r\n");
      out.write("				");
if(i>totalPage)break;//가지고 있는 총페이지수를 넘어서면 빠져나오게
      out.write("\r\n");
      out.write("					<!--a태그의 뜻 : 지정한 url로 요청을 시도-->\r\n");
      out.write("					<a href=\"/notice/list.jsp?currentPage=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i);
      out.write("]</a>\r\n");
      out.write("				");
}
      out.write("\r\n");
      out.write("				");
if(lastPage+1<=totalPage){//다음 페이지가 있을때..
      out.write("\r\n");
      out.write("				<a href=\"/notice/list.jsp?currentPage=");
      out.print(lastPage+1);
      out.write("\">▶</a>\r\n");
      out.write("				");
}else{
      out.write("\r\n");
      out.write("						<a href=\"javascript:alert('다음 페이지가 없습니다.')\">▶</a>\r\n");
      out.write("				");
}
      out.write("\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\">\r\n");
      out.write("			<button>글등록</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
